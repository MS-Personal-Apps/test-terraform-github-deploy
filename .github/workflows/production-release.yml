name: Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: "The version to deploy e.g. 'v1.0.1'"
        required: true
        type: string

env:
  GH_PACKAGE_TOKEN: ${{ secrets.GH_PACKAGE_TOKEN }}

permissions:
  id-token: write
  contents: read
  checks: write

jobs:
  node-deploy:
    name: Node Deploy
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJSON(vars.WORKFLOW_TIMEOUT_IN_MINUTES) }}

    steps:
      - uses: actions/checkout@v3
      - name: 'Install dependencies'
        uses: ./.github/actions/dependencies
        with:
          node-version: '18.x'

      - name: Create App Directory on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}
          script: |
            mkdir -p /home/ubuntu/app
            chown -R ubuntu:ubuntu /home/ubuntu/app
            chmod -R 755 /home/ubuntu/app
            
      - name: Deploy to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PRODUCTION_EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}
          source: "."  # Change this if your application files are in a different directory
          target: "/home/ubuntu/app"  # Change this to the destination directory on your EC2 instance
          overwrite: true

      - name: SSH into EC2 and Restart Application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.PRODUCTION_SSH_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/app
            pm2 restart index.js 

  update-stack:
    name: Update the version in the stack repo
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJSON(vars.WORKFLOW_TIMEOUT_IN_MINUTES) }}
    needs: [node-deploy]

    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.SEMVER_TOKEN }}
      - name: 'Configure git'
        run: |
          git config --global user.email "59701451+alamy-cicd@users.noreply.github.com"
          git config --global user.name "alamy-cicd"
      - name: 'Update the workflow files'
        run: |
          sed -i '/lambda_version/s/".*"/"${{ inputs.version }}"/' terraform/workspaces/production.tfvars
      - name: 'Commit'
        run: 'git commit -am "chore: update lambda version to ${{ inputs.version }} [skip ci]"'
      - name: 'Push'
        run: git push

  notify:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJSON(vars.WORKFLOW_TIMEOUT_IN_MINUTES) }}
    if: always()
    needs: [node-deploy]
    steps:
      - name: Send a Notification
        id: notify
        uses: thechetantalwar/teams-notify@v2
        with:
          teams_webhook_url: ${{ secrets.NOTIFICATION_WEBHOOK }}
          message: 'Github Action Build Number ${{ github.run_number }} Completed for ${{ github.repository }} and the outcome is  ${{ needs.deploy.result }}.'
