name: Staging Release
on:
  push:
    branches:
      - main
env:
  GH_PACKAGE_TOKEN: ${{ secrets.GH_PACKAGE_TOKEN }}

permissions:
  id-token: write
  contents: read
  checks: write

jobs:
  unit-test:
    name: Unit Test
    # https://github.com/actions/runner/issues/774
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJSON(vars.WORKFLOW_TIMEOUT_IN_MINUTES) }}

    steps:
      - uses: actions/checkout@v3
      - name: 'Install dependencies'
        uses: ./.github/actions/dependencies
        with:
          node-version: '18.x'
      # - run: npm run lint
      # - run: npm run test

  semantic-release:
    name: Semantic Release
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    needs: [unit-test]
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJSON(vars.WORKFLOW_TIMEOUT_IN_MINUTES) }}
    outputs:
      version: ${{ steps.release.outputs.version }}

    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - name: 'Install dependencies'
        uses: ./.github/actions/dependencies
        with:
          node-version: '18.x'
      - name: 'Semantic Release'
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.SEMVER_TOKEN }}
          NPM_TOKEN: ${{ secrets.SEMVER_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.SEMVER_TOKEN }}
        run: |
          npx semantic-release
          echo "version=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT

  # push-artefact:
  #   strategy:
      # matrix:
      #   include:
      #     - environment: development
      #       s3-location: s3://serverless-deployments-alamy-eu-west-1-development/bundles/test-terraform-github-deploy/development/${{ needs.semantic-release.outputs.version }}.zip
      #       account: DEV_ACCOUNT_ID
      #     - environment: staging
      #       s3-location: s3://serverless-deployments-alamy-eu-west-1-staging/bundles/test-terraform-github-deploy/staging/${{ needs.semantic-release.outputs.version }}.zip
      #       account: STAGING_ACCOUNT_ID
      #     - environment: production
      #       s3-location: s3://serverless-deployments-alamy-eu-west-1-production/bundles/test-terraform-github-deploy/production/${{ needs.semantic-release.outputs.version }}.zip
      #       account: PRODUCTION_ACCOUNT_ID
    # name: Push package to the ${{ matrix.environment }} S3 bucket
    # needs: [semantic-release]
    # runs-on: ubuntu-latest
    # timeout-minutes: ${{ fromJSON(vars.WORKFLOW_TIMEOUT_IN_MINUTES) }}
    # steps:
    #   - uses: actions/checkout@v3
    #   - name: 'Install dependencies'
    #     uses: alamy-ops/github-actions/actions/install-node-dependencies@main
    #     with:
    #       node-version: '18.x'
    #   - name: 'Assume AWS role'
    #     uses: aws-actions/configure-aws-credentials@v1
    #     with:
    #       aws-region: eu-west-1
    #       role-to-assume: arn:aws:iam::${{ secrets[matrix.account] }}:role/${{ secrets.AWS_DEPLOY_ROLE }}
    #   # - name: 'Package and push to the ${{ matrix.environment }} S3 bucket'
    #   #   uses: ./.github/actions/package
    #   #   with:
    #   #     s3-location: ${{ matrix.s3-location }}

  deploy-development:
    name: Deploy Development
    needs: [semantic-release, push-artefact]
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJSON(vars.WORKFLOW_TIMEOUT_IN_MINUTES) }}

    steps:
      - uses: actions/checkout@v3
      - name: 'Assume AWS role'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          # role-to-assume: arn:aws:iam::${{ secrets.DEV_ACCOUNT_ID }}:role/${{ secrets.AWS_DEPLOY_ROLE }}
      - name: 'Deploy the stack'
        uses: ./.github/actions/terraform
        with:
          workspace: development
          action: apply
          lambda-version: ${{ needs.semantic-release.outputs.version }}
          working-directory: ./terraform

  deploy-staging:
    name: Deploy Staging
    needs: [semantic-release, push-artefact]
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJSON(vars.WORKFLOW_TIMEOUT_IN_MINUTES) }}

    steps:
      - uses: actions/checkout@v3
      - name: 'Assume AWS role'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          # role-to-assume: arn:aws:iam::${{ secrets.STAGING_ACCOUNT_ID }}:role/${{ secrets.AWS_DEPLOY_ROLE }}
      - name: 'Deploy the stack'
        uses: ./.github/actions/terraform
        with:
          workspace: staging
          action: apply
          lambda-version: ${{ needs.semantic-release.outputs.version }}
          working-directory: ./terraform

  plan-production:
    name: Plan production
    needs: [semantic-release, push-artefact]
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJSON(vars.WORKFLOW_TIMEOUT_IN_MINUTES) }}

    steps:
      - uses: actions/checkout@v3
      - name: 'Assume AWS role'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          # role-to-assume: arn:aws:iam::${{ secrets.PRODUCTION_ACCOUNT_ID }}:role/${{ secrets.AWS_DEPLOY_ROLE }}
      - name: 'Plan the stack'
        uses: ./.github/actions/terraform
        with:
          workspace: production
          action: plan
          lambda-version: ${{ needs.semantic-release.outputs.version }}
          working-directory: ./terraform

  # int-test:
  #   name: Test Deployed Lambda
  #   needs: [deploy-staging]
  #   runs-on: ubuntu-latest
  #   timeout-minutes: ${{ fromJSON(vars.WORKFLOW_TIMEOUT_IN_MINUTES) }}

  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: 'Install dependencies'
  #       uses: alamy-ops/github-actions/actions/install-node-dependencies@main
  #       with:
  #         node-version: '18.x'
  #     - name: 'Assume AWS role'
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-region: eu-west-1
  #         role-to-assume: arn:aws:iam::${{ secrets.STAGING_ACCOUNT_ID }}:role/${{ secrets.AWS_DEPLOY_ROLE }}
  #     - name: Run Tests
  #       run: npm run test:int:ci
  #       env:
  #         TEST_ENV: staging

  #     - name: Publish test report
  #       uses: dorny/test-reporter@v1
  #       if: success() || failure()
  #       with:
  #         name: Int test Report
  #         path: reports/junit-int.xml
  #         reporter: jest-junit

  # update-stack:
  #   name: Update the version in the stack repo
  #   runs-on: ubuntu-latest
  #   timeout-minutes: ${{ fromJSON(vars.WORKFLOW_TIMEOUT_IN_MINUTES) }}
  #   needs: [semantic-release, deploy-development, deploy-staging]

  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         token: ${{ secrets.SEMVER_TOKEN }}
  #         ref: main
  #     - name: 'Configure git'
  #       run: |
  #         git config --global user.email "59701451+alamy-cicd@users.noreply.github.com"
  #         git config --global user.name "alamy-cicd"
  #     - name: 'Update the workflow files'
  #       run: |
  #         sed -i '/lambda_version/s/".*"/"${{ needs.semantic-release.outputs.version }}"/' terraform/workspaces/development.tfvars
  #         sed -i '/lambda_version/s/".*"/"${{ needs.semantic-release.outputs.version }}"/' terraform/workspaces/staging.tfvars
  #     - name: 'Commit'
  #       run: 'git commit -am "chore: update pre-prod lambda version to ${{ needs.semantic-release.outputs.version }} [skip ci]"'
  #     - name: 'Push'
  #       run: git push
