name: PR Release
on: [pull_request]

env:
  GH_PACKAGE_TOKEN: ${{ secrets.GH_PACKAGE_TOKEN }}

permissions:
  id-token: write
  contents: read
  checks: write

jobs:
  unit-test:
    name: Unit Test
    # https://github.com/actions/runner/issues/774
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJSON(vars.WORKFLOW_TIMEOUT_IN_MINUTES) }}

    steps:
      - uses: actions/checkout@v2
      - name: 'Install dependencies'
        uses: ./.github/actions/dependencies
        with:
          node-version: '18.x'
      # - run: npm run lint
      # - run: npm run test

  terraform-deploy:
    name: AWS-Services Deploy
    needs: [unit-test]
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJSON(vars.WORKFLOW_TIMEOUT_IN_MINUTES) }}

    steps:
      - uses: actions/checkout@v3
      - name: 'Install dependencies'
        uses: ./.github/actions/dependencies
        with:
          node-version: '18.x'

      - name: 'Assume AWS role'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 'Deploy the stack'
        uses: ./.github/actions/terraform
        with:
          workspace: pr-${{ github.event.pull_request.number }}
          action: apply
          lambda-version: ${{ github.sha }}
          working-directory: ./terraform

  deploy:
    name: Node Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      - name: Install Dependencies
        run: npm install

      - name: Create App Directory on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            mkdir -p /home/ubuntu/app
            
      - name: Deploy to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "."  # Change this if your application files are in a different directory
          target: "/home/ubuntu/app"  # Change this to the destination directory on your EC2 instance
          overwrite: true

      - name: SSH into EC2 and Restart Application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/app
            pm2 restart index.js 
