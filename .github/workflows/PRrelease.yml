name: PR Release
on: [pull_request]

env:
  GH_PACKAGE_TOKEN: ${{ secrets.GH_PACKAGE_TOKEN }}

permissions:
  id-token: write
  contents: read
  checks: write

jobs:
  unit-test:
    name: Unit Test
    # https://github.com/actions/runner/issues/774
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJSON(vars.WORKFLOW_TIMEOUT_IN_MINUTES) }}

    steps:
      - uses: actions/checkout@v2
      - name: 'Install dependencies'
        uses: ./.github/actions/dependencies
        with:
          node-version: '18.x'
      # - run: npm run lint
      # - run: npm run test

  node-deploy:
    name: Node Deploy
    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJSON(vars.WORKFLOW_TIMEOUT_IN_MINUTES) }}

    steps:
      - uses: actions/checkout@v3
      - name: 'Install dependencies'
        uses: ./.github/actions/dependencies
        with:
          node-version: '18.x'

      - name: Create App Directory on EC2
        uses: appleboy/ssh-action@master
        with:
          host: '63.32.98.99'
          username: ubuntu
          key: 'ss'
          script: |
            mkdir -p /home/ubuntu/app
            
      # - name: Deploy to EC2
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ubuntu
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     source: "."  # Change this if your application files are in a different directory
      #     target: "/home/ubuntu/app"  # Change this to the destination directory on your EC2 instance
      #     overwrite: true

      # - name: SSH into EC2 and Restart Application
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ubuntu
      #     key: ${{ secrets.SSH_PRIVATE_KEY }}
      #     script: |
      #       cd /home/ubuntu/app
      #       pm2 restart index.js 

  # int-test:
  #   name: Test Deployed Lambda
  #   needs: [deploy]
  #   runs-on: ubuntu-latest
  #   timeout-minutes: ${{ fromJSON(vars.WORKFLOW_TIMEOUT_IN_MINUTES) }}

  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: 'Install dependencies'
  #       uses: alamy-ops/github-actions/actions/install-node-dependencies@main
  #       with:
  #         node-version: '18.x'

  #     - name: 'Assume AWS role'
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-region: eu-west-1
  #         role-to-assume: arn:aws:iam::${{ secrets.DEV_ACCOUNT_ID }}:role/${{ secrets.AWS_DEPLOY_ROLE }}

  #     - name: Run Tests
  #       run: npm run test:int:ci
  #       env:
  #         LAMBDA_ARN: test-terraform-github-deploy-pr-${{ github.event.pull_request.number }}
  #         TEST_ENV: development

  #     - name: Publish test report
  #       uses: dorny/test-reporter@v1
  #       if: success() || failure()
  #       with:
  #         name: Int test Report
  #         path: reports/junit-int.xml
  #         reporter: jest-junit

 